version: '3.8'

services:
  mongodb1:
    container_name: mongo1
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: debezium
      MONGO_INITDB_ROOT_PASSWORD: dbz
      MONGO_INITDB_DATABASE: test_db
    volumes:
      # - ./volumes/mongodb1:/data/db
      - ./data/Cell_Phones.json:/Cell_Phones.json
    ports:
      - "27011:27011"
    expose:
      - "27011"
    entrypoint:
      [
        "/usr/bin/mongod",
        "--port", "27011",
        "--replSet", "rs0",
        "--bind_ip_all",
      ]
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27011/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5

  mongodb2:
    container_name: mongo2
    image: mongo
    volumes:
      - ./volumes/mongodb2:/data/db
    ports:
      - "27012:27012"
    expose:
      - "27012"
    entrypoint:
      [
        "/usr/bin/mongod",
        "--port", "27012",
        "--replSet", "rs0",
        "--bind_ip_all",
      ]
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27012/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5

  mongodb3:
    container_name: mongo3
    image: mongo
    volumes:
      - ./volumes/mongodb3:/data/db
    ports:
      - "27013:27013"
    expose:
      - "27013"
    entrypoint:
      [
        "/usr/bin/mongod",
        "--port", "27013",
        "--replSet", "rs0",
        "--bind_ip_all",
      ]
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27013/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5

  mongosetup:
    container_name: mongosetup
    image: "mongo-setup"
    build: "./mongo_setup"
    depends_on:
      - mongodb1

  # mongo-express:
  #   container_name: mongo-express
  #   image: mongo-express
  #   environment:
  #     ME_CONFIG_MONGODB_URL: mongodb://mongodb1:27011,mongodb2:27012,mongodb3:27013/?replicaSet=rs0
  #   ports:
  #     - 8081:8081
  #   restart: on-failure
  #   depends_on:
  #     - mongodb1
  #     - mongosetup

# ========== KAFKA (ZOOKEEPERS, DEBEZIUM, SCHEMA REGISTRY, NODES, UI) ========

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1 
      start_period: 10s
      retries: 20
      interval: 10s
      
  broker:
    image: confluentinc/cp-kafka:7.3.1
    hostname: broker
    container_name: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - '29092:29092'
      - '9092:9092'
      - '9101:9101'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

  debezium:
    image: debezium/connect:latest
    restart: always
    container_name: debezium
    hostname: debezium
    depends_on:
      mongodb1:
        condition: service_healthy
      broker:
        condition: service_healthy
    # links:
    #  - broker
    #  - mongodb1
    ports:
      - '8083:8083'
    environment:
      BOOTSTRAP_SERVERS: broker:29092
      # BOOTSTRAP_SERVERS: broker:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      STATUS_STORAGE_TOPIC: connect_statuses
      OFFSET_STORAGE_TOPIC: connect_offsets
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      ENABLE_DEBEZIUM_SCRIPTING: 'true'
    healthcheck:
      test:
        [
          'CMD',
          'curl',
          '--silent',
          '--fail',
          '-X',
          'GET',
          'http://localhost:8083/connectors',
        ]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 5

  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - '8081:8081'
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker:29092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    healthcheck:
      start_period: 10s
      interval: 10s
      retries: 20
      test: curl --user superUser:superUser --fail --silent --insecure http://localhost:8081/subjects --output /dev/null || exit 1

  debezium-ui:
    image: debezium/debezium-ui:latest
    restart: always
    container_name: debezium-ui
    hostname: debezium-ui
    depends_on:
      debezium:
        condition: service_healthy
    ports:
      - '8080:8080'
    environment:
      KAFKA_CONNECT_URIS: http://debezium:8083

# ==============SET VOLUMES AND NETWORKS=========   
# networks:
#   mongors-network:
#     driver: bridge